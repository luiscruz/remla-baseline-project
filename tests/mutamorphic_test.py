from typing import Tuple, List, Dict
import nltk
from nltk.corpus import wordnet as wn
from nltk.corpus.reader import Synset
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import re

# Input phrases

# Function to change it with
# synonyms
# hypernyms
# hyponyms

# options: random seed

# Obtain results for set of phrases

# Compare the results

_stopwords = stopwords.words('english')
_pos_tag_map = {
    'NN': [wn.NOUN],
    'JJ': [wn.ADJ, wn.ADJ_SAT],
    'RB': [wn.ADV],
    'VB': [wn.VERB]
}


def convert_pos_tag(nltk_pos_tag):
    root_tag = nltk_pos_tag[0:2]
    try:
        _pos_tag_map[root_tag]
        return _pos_tag_map[root_tag]
    except KeyError:
        return ''


class Word:

    def __init__(self, value: str, pos_tag: str):
        self.value = value
        self.pos_tag = convert_pos_tag(pos_tag)
        self.is_stopword: bool = value.lower() in _stopwords

    def __repr__(self):
        return f"Word(\"{self.value}\", tag: {self.pos_tag}, stopword: {self.is_stopword})"

    def get_variations(self) -> Dict[str, int]:
        """
        TODO
        returns dict. key: synonym/hypernym, count: how many times was this suggested by nltk
        """
        result: Dict[str, int] = {}

        if not self.is_variation_candidate:
            return result

        synsets = wn.synsets(self.value, pos=self.pos_tag)

        synonyms = Word._get_synonyms(synsets)
        hypernyms = Word._get_hypernyms(synsets)

        return result

    @property
    def is_variation_candidate(self):
        return not self.is_stopword and not self.pos_tag == ''

    @staticmethod
    def _get_synonyms(synsets: List[Synset]) -> List[str]:
        """
        TODO
        returns list of synonym suggestions
        """
        result: List[str] = []
        for synset in synsets:
            for lemma in synset.lemmas():
                substrings = lemma.name().split('.')
                synonym = substrings[-1]
                synonym_without_underscore = re.sub(r'_', ' ', synonym)
                result.append(synonym_without_underscore)

        return result

    @staticmethod
    def _get_hypernyms(synsets: List[Synset]) -> List[str]:
        """
        TODO
        returns list of hypernym suggestions
        """
        result: List[str] = []
        for synset in synsets:
            for hypernym in synset.hypernyms():
                for lemma in hypernym.lemmas():
                    substrings = lemma.name().split('.')
                    hypernym = substrings[-1]
                    hypernym_without_underscore = re.sub(r'_', ' ', hypernym)
                    result.append(hypernym_without_underscore)

        return result

    @staticmethod
    def from_tuple(tuple: Tuple[str, str]):
        '''
        Creates an instance of ``Word`` from a (token, part-of-speech tag), as generated by the
        functions ``nltk.pos_tag(tokens)``.

                Parameters:
                        tuple (Tuple[str, str]): A tuple with as the first argument the text token,
                                                 and as its second argument, the tokens POS tag.

                Returns:
                        an instance of ``Word``
        '''
        return Word(tuple[0], tuple[1])


def generate_variants(input_sentence: str,
                      num_variants: int = 5,
                      num_replacements: int = 1) -> List[str]:
    tokens = word_tokenize(input_sentence)
    tokens_with_pos_tags = nltk.pos_tag(tokens)
    words = [Word.from_tuple(t) for t in tokens_with_pos_tags]

    variations = [x.get_variations() for x in words]


    return [] # TODO



print(generate_variants("Uploading files via JSON Post request to a Web Service provided by Teambox"))